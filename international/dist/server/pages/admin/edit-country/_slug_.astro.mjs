/* empty css                                        */
import { e as createComponent, f as createAstro, r as renderTemplate, n as defineScriptVars, k as renderComponent, m as maybeRenderHead, h as addAttribute } from '../../../chunks/astro/server_6Vm7kAO5.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../../../chunks/Layout_BALE1YAg.mjs';
import { s as supabase } from '../../../chunks/supabase-client_BrwR6F9D.mjs';
import { g as getCountryContent } from '../../../chunks/db_BgTuE01l.mjs';
export { renderers } from '../../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$slug = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$slug;
  const { slug } = Astro2.params;
  const countryData = await getCountryContent(slug);
  if (!countryData) {
    return Astro2.redirect("/admin/country-sites");
  }
  const { data: templates } = await supabase.from("Templates").select("Name").order("Name");
  const templateNames = templates?.map((t) => t.Name) || [];
  const { data: defaultTemplate } = await supabase.from("Templates").select("config").eq("Name", templateNames[countryData.templateIndex || 0]).single();
  const templateContent = defaultTemplate?.config?.Contents || {};
  return renderTemplate(_a || (_a = __template(["", " <script>(function(){", "\n  document.addEventListener('DOMContentLoaded', () => {\n    // Tab switching\n    const tabs = {\n      heroTab: document.getElementById('heroTab'),\n      robolutionTab: document.getElementById('robolutionTab'),\n      highlightsTab: document.getElementById('highlightsTab'),\n      faqTab: document.getElementById('faqTab')\n    };\n    \n    const contentPanels = {\n      heroContent: document.getElementById('heroContent'),\n      robolutionContent: document.getElementById('robolutionContent'),\n      highlightsContent: document.getElementById('highlightsContent'),\n      faqContent: document.getElementById('faqContent')\n    };\n    \n    // Function to switch tabs\n    function switchTab(tabId) {\n      // Reset all tabs and content panels\n      Object.values(tabs).forEach(tab => {\n        tab.classList.remove('bg-indigo-600', 'text-white');\n        tab.classList.add('bg-gray-200', 'text-gray-700');\n      });\n      \n      Object.values(contentPanels).forEach(panel => {\n        panel.classList.add('hidden');\n      });\n      \n      // Activate the selected tab and panel\n      tabs[tabId].classList.remove('bg-gray-200', 'text-gray-700');\n      tabs[tabId].classList.add('bg-indigo-600', 'text-white');\n      \n      const contentId = tabId.replace('Tab', 'Content');\n      contentPanels[contentId].classList.remove('hidden');\n    }\n    \n    // Set up tab click handlers\n    Object.keys(tabs).forEach(tabId => {\n      tabs[tabId].addEventListener('click', () => switchTab(tabId));\n    });\n    \n    // Color input synchronization\n    const colorInputs = [\n      { color: 'primaryColor', text: 'primaryColorText' },\n      { color: 'secondaryColor', text: 'secondaryColorText' },\n      { color: 'accentColor', text: 'accentColorText' },\n      { color: 'backgroundColor', text: 'backgroundColorText' }\n    ];\n    \n    colorInputs.forEach(({ color, text }) => {\n      const colorInput = document.getElementById(color);\n      const textInput = document.getElementById(text);\n      \n      colorInput.addEventListener('input', () => {\n        textInput.value = colorInput.value;\n      });\n      \n      textInput.addEventListener('input', () => {\n        // Check if the value is a valid hex color\n        const isValidHex = /^#([0-9A-F]{3}){1,2}$/i.test(textInput.value);\n        if (isValidHex) {\n          colorInput.value = textInput.value;\n        }\n      });\n    });\n    \n    // Basic settings form submission\n    const basicSettingsForm = document.getElementById('basicSettingsForm');\n    const basicFormMessage = document.getElementById('basicFormMessage');\n    \n    basicSettingsForm.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      \n      const formData = new FormData(basicSettingsForm);\n      const data = {\n        id: document.getElementById('countryId').value,\n        name: formData.get('name'),\n        slug: formData.get('slug'),\n        description: formData.get('description'),\n        flagUrl: formData.get('flagUrl'),\n        active: formData.get('active') === 'on',\n        templateIndex: parseInt(formData.get('templateIndex') || '0', 10)\n      };\n      \n      try {\n        basicFormMessage.innerHTML = '<p class=\"text-gray-500\">Saving settings...</p>';\n        basicFormMessage.classList.remove('hidden');\n        \n        const response = await fetch('/api/countries', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n          basicFormMessage.innerHTML = `<p class=\"text-green-600\">${result.message}</p>`;\n          \n          // If slug was changed, redirect to the new URL after a short delay\n          if (data.slug !== countrySlug) {\n            basicFormMessage.innerHTML += '<p class=\"text-gray-500\">Redirecting to updated page...</p>';\n            setTimeout(() => {\n              window.location.href = `/admin/edit-country/${data.slug}`;\n            }, 1500);\n          }\n        } else {\n          basicFormMessage.innerHTML = `<p class=\"text-red-600\">Error: ${result.error}</p>`;\n        }\n      } catch (error) {\n        basicFormMessage.innerHTML = `<p class=\"text-red-600\">Error: ${error.message}</p>`;\n      }\n    });\n    \n    // Styles form submission\n    const stylesForm = document.getElementById('stylesForm');\n    const stylesFormMessage = document.getElementById('stylesFormMessage');\n    \n    stylesForm.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      \n      const customStyles = {\n        primaryColor: document.getElementById('primaryColorText').value,\n        secondaryColor: document.getElementById('secondaryColorText').value,\n        accentColor: document.getElementById('accentColorText').value,\n        backgroundColor: document.getElementById('backgroundColorText').value\n      };\n      \n      try {\n        stylesFormMessage.innerHTML = '<p class=\"text-gray-500\">Saving styles...</p>';\n        stylesFormMessage.classList.remove('hidden');\n        \n        const response = await fetch('/api/countries', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: document.getElementById('countryId').value,\n            customStyles\n          })\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n          stylesFormMessage.innerHTML = `<p class=\"text-green-600\">${result.message}</p>`;\n        } else {\n          stylesFormMessage.innerHTML = `<p class=\"text-red-600\">Error: ${result.error}</p>`;\n        }\n      } catch (error) {\n        stylesFormMessage.innerHTML = `<p class=\"text-red-600\">Error: ${error.message}</p>`;\n      }\n    });\n    \n    // Content form submission\n    const saveContentBtn = document.getElementById('saveContentBtn');\n    const contentFormMessage = document.getElementById('contentFormMessage');\n    \n    saveContentBtn.addEventListener('click', async () => {\n      try {\n        contentFormMessage.innerHTML = '<p class=\"text-gray-500\">Saving content...</p>';\n        contentFormMessage.classList.remove('hidden');\n        \n        // Collect all input values from the content editor\n        const content = {};\n        \n        // Function to add a value to the content object using dot notation path\n        function setNestedValue(obj, path, value) {\n          const parts = path.split('.');\n          let current = obj;\n          \n          for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i];\n            if (!current[part]) {\n              current[part] = {};\n            }\n            current = current[part];\n          }\n          \n          current[parts[parts.length - 1]] = value;\n        }\n        \n        // Get all inputs and textareas from the content panels\n        const inputs = document.querySelectorAll('#heroContent input, #heroContent textarea, #robolutionContent input, #robolutionContent textarea, #highlightsContent input, #highlightsContent textarea, #faqContent input, #faqContent textarea');\n        \n        inputs.forEach(input => {\n          if (input.name) {\n            setNestedValue(content, input.name, input.value);\n          }\n        });\n        \n        const response = await fetch('/api/country-content', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            slug: countrySlug,\n            content\n          })\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n          contentFormMessage.innerHTML = `<p class=\"text-green-600\">${result.message}</p>`;\n        } else {\n          contentFormMessage.innerHTML = `<p class=\"text-red-600\">Error: ${result.error}</p>`;\n        }\n      } catch (error) {\n        contentFormMessage.innerHTML = `<p class=\"text-red-600\">Error: ${error.message}</p>`;\n      }\n    });\n  });\n})();<\/script>"], ["", " <script>(function(){", "\n  document.addEventListener('DOMContentLoaded', () => {\n    // Tab switching\n    const tabs = {\n      heroTab: document.getElementById('heroTab'),\n      robolutionTab: document.getElementById('robolutionTab'),\n      highlightsTab: document.getElementById('highlightsTab'),\n      faqTab: document.getElementById('faqTab')\n    };\n    \n    const contentPanels = {\n      heroContent: document.getElementById('heroContent'),\n      robolutionContent: document.getElementById('robolutionContent'),\n      highlightsContent: document.getElementById('highlightsContent'),\n      faqContent: document.getElementById('faqContent')\n    };\n    \n    // Function to switch tabs\n    function switchTab(tabId) {\n      // Reset all tabs and content panels\n      Object.values(tabs).forEach(tab => {\n        tab.classList.remove('bg-indigo-600', 'text-white');\n        tab.classList.add('bg-gray-200', 'text-gray-700');\n      });\n      \n      Object.values(contentPanels).forEach(panel => {\n        panel.classList.add('hidden');\n      });\n      \n      // Activate the selected tab and panel\n      tabs[tabId].classList.remove('bg-gray-200', 'text-gray-700');\n      tabs[tabId].classList.add('bg-indigo-600', 'text-white');\n      \n      const contentId = tabId.replace('Tab', 'Content');\n      contentPanels[contentId].classList.remove('hidden');\n    }\n    \n    // Set up tab click handlers\n    Object.keys(tabs).forEach(tabId => {\n      tabs[tabId].addEventListener('click', () => switchTab(tabId));\n    });\n    \n    // Color input synchronization\n    const colorInputs = [\n      { color: 'primaryColor', text: 'primaryColorText' },\n      { color: 'secondaryColor', text: 'secondaryColorText' },\n      { color: 'accentColor', text: 'accentColorText' },\n      { color: 'backgroundColor', text: 'backgroundColorText' }\n    ];\n    \n    colorInputs.forEach(({ color, text }) => {\n      const colorInput = document.getElementById(color);\n      const textInput = document.getElementById(text);\n      \n      colorInput.addEventListener('input', () => {\n        textInput.value = colorInput.value;\n      });\n      \n      textInput.addEventListener('input', () => {\n        // Check if the value is a valid hex color\n        const isValidHex = /^#([0-9A-F]{3}){1,2}$/i.test(textInput.value);\n        if (isValidHex) {\n          colorInput.value = textInput.value;\n        }\n      });\n    });\n    \n    // Basic settings form submission\n    const basicSettingsForm = document.getElementById('basicSettingsForm');\n    const basicFormMessage = document.getElementById('basicFormMessage');\n    \n    basicSettingsForm.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      \n      const formData = new FormData(basicSettingsForm);\n      const data = {\n        id: document.getElementById('countryId').value,\n        name: formData.get('name'),\n        slug: formData.get('slug'),\n        description: formData.get('description'),\n        flagUrl: formData.get('flagUrl'),\n        active: formData.get('active') === 'on',\n        templateIndex: parseInt(formData.get('templateIndex') || '0', 10)\n      };\n      \n      try {\n        basicFormMessage.innerHTML = '<p class=\"text-gray-500\">Saving settings...</p>';\n        basicFormMessage.classList.remove('hidden');\n        \n        const response = await fetch('/api/countries', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n          basicFormMessage.innerHTML = \\`<p class=\"text-green-600\">\\${result.message}</p>\\`;\n          \n          // If slug was changed, redirect to the new URL after a short delay\n          if (data.slug !== countrySlug) {\n            basicFormMessage.innerHTML += '<p class=\"text-gray-500\">Redirecting to updated page...</p>';\n            setTimeout(() => {\n              window.location.href = \\`/admin/edit-country/\\${data.slug}\\`;\n            }, 1500);\n          }\n        } else {\n          basicFormMessage.innerHTML = \\`<p class=\"text-red-600\">Error: \\${result.error}</p>\\`;\n        }\n      } catch (error) {\n        basicFormMessage.innerHTML = \\`<p class=\"text-red-600\">Error: \\${error.message}</p>\\`;\n      }\n    });\n    \n    // Styles form submission\n    const stylesForm = document.getElementById('stylesForm');\n    const stylesFormMessage = document.getElementById('stylesFormMessage');\n    \n    stylesForm.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      \n      const customStyles = {\n        primaryColor: document.getElementById('primaryColorText').value,\n        secondaryColor: document.getElementById('secondaryColorText').value,\n        accentColor: document.getElementById('accentColorText').value,\n        backgroundColor: document.getElementById('backgroundColorText').value\n      };\n      \n      try {\n        stylesFormMessage.innerHTML = '<p class=\"text-gray-500\">Saving styles...</p>';\n        stylesFormMessage.classList.remove('hidden');\n        \n        const response = await fetch('/api/countries', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: document.getElementById('countryId').value,\n            customStyles\n          })\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n          stylesFormMessage.innerHTML = \\`<p class=\"text-green-600\">\\${result.message}</p>\\`;\n        } else {\n          stylesFormMessage.innerHTML = \\`<p class=\"text-red-600\">Error: \\${result.error}</p>\\`;\n        }\n      } catch (error) {\n        stylesFormMessage.innerHTML = \\`<p class=\"text-red-600\">Error: \\${error.message}</p>\\`;\n      }\n    });\n    \n    // Content form submission\n    const saveContentBtn = document.getElementById('saveContentBtn');\n    const contentFormMessage = document.getElementById('contentFormMessage');\n    \n    saveContentBtn.addEventListener('click', async () => {\n      try {\n        contentFormMessage.innerHTML = '<p class=\"text-gray-500\">Saving content...</p>';\n        contentFormMessage.classList.remove('hidden');\n        \n        // Collect all input values from the content editor\n        const content = {};\n        \n        // Function to add a value to the content object using dot notation path\n        function setNestedValue(obj, path, value) {\n          const parts = path.split('.');\n          let current = obj;\n          \n          for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i];\n            if (!current[part]) {\n              current[part] = {};\n            }\n            current = current[part];\n          }\n          \n          current[parts[parts.length - 1]] = value;\n        }\n        \n        // Get all inputs and textareas from the content panels\n        const inputs = document.querySelectorAll('#heroContent input, #heroContent textarea, #robolutionContent input, #robolutionContent textarea, #highlightsContent input, #highlightsContent textarea, #faqContent input, #faqContent textarea');\n        \n        inputs.forEach(input => {\n          if (input.name) {\n            setNestedValue(content, input.name, input.value);\n          }\n        });\n        \n        const response = await fetch('/api/country-content', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            slug: countrySlug,\n            content\n          })\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n          contentFormMessage.innerHTML = \\`<p class=\"text-green-600\">\\${result.message}</p>\\`;\n        } else {\n          contentFormMessage.innerHTML = \\`<p class=\"text-red-600\">Error: \\${result.error}</p>\\`;\n        }\n      } catch (error) {\n        contentFormMessage.innerHTML = \\`<p class=\"text-red-600\">Error: \\${error.message}</p>\\`;\n      }\n    });\n  });\n})();<\/script>"])), renderComponent($$result, "Layout", $$Layout, { "title": `Edit ${countryData.name} Site` }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<main class="container mx-auto px-4 py-8"> <div class="mb-6"> <a href="/admin/country-sites" class="text-indigo-600 hover:text-indigo-900">
&larr; Back to Country Sites
</a> </div> <h1 class="text-3xl font-bold mb-8 text-center">Edit ${countryData.name} Site</h1> <div class="grid grid-cols-1 md:grid-cols-3 gap-8"> <!-- Country Settings --> <div class="bg-white rounded-lg shadow-md p-6"> <h2 class="text-xl font-semibold mb-4">Basic Settings</h2> <form id="basicSettingsForm" class="space-y-4"> <input type="hidden" id="countryId"${addAttribute(countryData.id, "value")}> <div> <label for="name" class="block text-sm font-medium text-gray-700">Country Name</label> <input type="text" id="name" name="name"${addAttribute(countryData.name, "value")} required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="slug" class="block text-sm font-medium text-gray-700">Slug (URL Path)</label> <div class="mt-1 flex rounded-md shadow-sm"> <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm">
/
</span> <input type="text" id="slug" name="slug"${addAttribute(countryData.slug, "value")} required class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <div> <label for="description" class="block text-sm font-medium text-gray-700">Description</label> <textarea id="description" name="description" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.description}</textarea> </div> <div> <label for="flagUrl" class="block text-sm font-medium text-gray-700">Flag URL</label> <input type="url" id="flagUrl" name="flagUrl"${addAttribute(countryData.flagUrl, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="templateIndex" class="block text-sm font-medium text-gray-700">Template</label> <select id="templateIndex" name="templateIndex" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> ${templateNames.map((name, index) => renderTemplate`<option${addAttribute(index, "value")}${addAttribute(index === countryData.templateIndex, "selected")}>${name}</option>`)} </select> </div> <div class="flex items-center"> <input type="checkbox" id="active" name="active"${addAttribute(countryData.active, "checked")} class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"> <label for="active" class="ml-2 block text-sm text-gray-900">Active</label> </div> <div class="pt-4"> <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
Save Basic Settings
</button> </div> </form> <div id="basicFormMessage" class="mt-4 hidden"> <!-- Form messages will be displayed here --> </div> <!-- Custom Styles --> <h2 class="text-xl font-semibold mt-8 mb-4">Custom Styles</h2> <form id="stylesForm" class="space-y-4"> <div> <label for="primaryColor" class="block text-sm font-medium text-gray-700">Primary Color</label> <div class="mt-1 flex items-center"> <input type="color" id="primaryColor" name="primaryColor"${addAttribute(countryData.customStyles?.primaryColor || "#00008b", "value")} class="h-8 w-8 rounded-md border border-gray-300 mr-2"> <input type="text" id="primaryColorText"${addAttribute(countryData.customStyles?.primaryColor || "#00008b", "value")} class="flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <div> <label for="secondaryColor" class="block text-sm font-medium text-gray-700">Secondary Color</label> <div class="mt-1 flex items-center"> <input type="color" id="secondaryColor" name="secondaryColor"${addAttribute(countryData.customStyles?.secondaryColor || "#FFB366", "value")} class="h-8 w-8 rounded-md border border-gray-300 mr-2"> <input type="text" id="secondaryColorText"${addAttribute(countryData.customStyles?.secondaryColor || "#FFB366", "value")} class="flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <div> <label for="accentColor" class="block text-sm font-medium text-gray-700">Accent Color</label> <div class="mt-1 flex items-center"> <input type="color" id="accentColor" name="accentColor"${addAttribute(countryData.customStyles?.accentColor || "#6AAAFF", "value")} class="h-8 w-8 rounded-md border border-gray-300 mr-2"> <input type="text" id="accentColorText"${addAttribute(countryData.customStyles?.accentColor || "#6AAAFF", "value")} class="flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <div> <label for="backgroundColor" class="block text-sm font-medium text-gray-700">Background Color</label> <div class="mt-1 flex items-center"> <input type="color" id="backgroundColor" name="backgroundColor"${addAttribute(countryData.customStyles?.backgroundColor || "#FFFFFF", "value")} class="h-8 w-8 rounded-md border border-gray-300 mr-2"> <input type="text" id="backgroundColorText"${addAttribute(countryData.customStyles?.backgroundColor || "#FFFFFF", "value")} class="flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <div class="pt-4"> <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
Save Custom Styles
</button> </div> </form> <div id="stylesFormMessage" class="mt-4 hidden"> <!-- Form messages will be displayed here --> </div> </div> <!-- Content Editor --> <div class="md:col-span-2 bg-white rounded-lg shadow-md p-6"> <h2 class="text-xl font-semibold mb-4">Content Editor</h2> <div class="mb-6"> <div class="flex space-x-1"> <button id="heroTab" class="px-4 py-2 bg-indigo-600 text-white rounded-t-md">Hero</button> <button id="robolutionTab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-t-md">Robolution</button> <button id="highlightsTab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-t-md">Highlights</button> <button id="faqTab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-t-md">FAQ</button> </div> <div class="border border-gray-300 rounded-b-md rounded-tr-md p-4"> <!-- Hero Content --> <div id="heroContent" class="space-y-4"> <div> <label for="heroMainText" class="block text-sm font-medium text-gray-700">Main Title</label> <input type="text" id="heroMainText" name="hero.mainText"${addAttribute(countryData.content?.hero?.mainText || templateContent.Home?.hero?.mainText, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="heroSubText" class="block text-sm font-medium text-gray-700">Subtitle</label> <textarea id="heroSubText" name="hero.subText" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.hero?.subText || templateContent.Home?.hero?.subText}</textarea> </div> <div> <label for="heroButtonText" class="block text-sm font-medium text-gray-700">Button Text</label> <input type="text" id="heroButtonText" name="hero.buttonText"${addAttribute(countryData.content?.hero?.buttonText || templateContent.Home?.hero?.buttonText, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="heroVideoDirectory" class="block text-sm font-medium text-gray-700">Video URL</label> <input type="text" id="heroVideoDirectory" name="hero.videoDirectory"${addAttribute(countryData.content?.hero?.videoDirectory || templateContent.Home?.hero?.videoDirectory, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <!-- Robolution Content --> <div id="robolutionContent" class="hidden space-y-4"> <div> <label for="robolutionIntro1" class="block text-sm font-medium text-gray-700">Section 1 Title</label> <input type="text" id="robolutionIntro1" name="Robolution.title1.intro1"${addAttribute(countryData.content?.Robolution?.title1?.intro1 || templateContent.Home?.Robolution?.title1?.intro1, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="robolutionSub1" class="block text-sm font-medium text-gray-700">Section 1 Content</label> <textarea id="robolutionSub1" name="Robolution.title1.sub1" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.Robolution?.title1?.sub1 || templateContent.Home?.Robolution?.title1?.sub1}</textarea> </div> <div> <label for="robolutionImage1" class="block text-sm font-medium text-gray-700">Section 1 Image</label> <input type="text" id="robolutionImage1" name="Robolution.title1.image1"${addAttribute(countryData.content?.Robolution?.title1?.image1 || templateContent.Home?.Robolution?.title1?.image1, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="robolutionIntro2" class="block text-sm font-medium text-gray-700">Section 2 Title</label> <input type="text" id="robolutionIntro2" name="Robolution.title2.intro2"${addAttribute(countryData.content?.Robolution?.title2?.intro2 || templateContent.Home?.Robolution?.title2?.intro2, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="robolutionSub2" class="block text-sm font-medium text-gray-700">Section 2 Content</label> <textarea id="robolutionSub2" name="Robolution.title2.sub2" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.Robolution?.title2?.sub2 || templateContent.Home?.Robolution?.title2?.sub2}</textarea> </div> <div> <label for="robolutionImage2" class="block text-sm font-medium text-gray-700">Section 2 Image</label> <input type="text" id="robolutionImage2" name="Robolution.title2.image2"${addAttribute(countryData.content?.Robolution?.title2?.image2 || templateContent.Home?.Robolution?.title2?.image2, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> </div> <!-- Highlights Content --> <div id="highlightsContent" class="hidden space-y-4"> <div> <label for="highlightsTitle" class="block text-sm font-medium text-gray-700">Highlights Title</label> <input type="text" id="highlightsTitle" name="Highlights.Title"${addAttribute(countryData.content?.Highlights?.Title || templateContent.Home?.Highlights?.Title, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <!-- First highlight --> <div class="border-t border-gray-200 pt-4"> <label class="block text-sm font-medium text-gray-700">Highlight 1</label> <div class="mt-2 space-y-2"> <input type="text" name="Highlights.Highlight1.Highlight1"${addAttribute(countryData.content?.Highlights?.Highlight1?.Highlight1 || templateContent.Home?.Highlights?.Highlight1?.Highlight1, "value")} placeholder="Title" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> <textarea name="Highlights.Highlight1.description1" placeholder="Description" rows="2" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.Highlights?.Highlight1?.description1 || templateContent.Home?.Highlights?.Highlight1?.description1}</textarea> </div> </div> <!-- Second highlight --> <div class="border-t border-gray-200 pt-4"> <label class="block text-sm font-medium text-gray-700">Highlight 2</label> <div class="mt-2 space-y-2"> <input type="text" name="Highlights.Highlight2.Highlight2"${addAttribute(countryData.content?.Highlights?.Highlight2?.Highlight2 || templateContent.Home?.Highlights?.Highlight2?.Highlight2, "value")} placeholder="Title" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> <textarea name="Highlights.Highlight2.description2" placeholder="Description" rows="2" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.Highlights?.Highlight2?.description2 || templateContent.Home?.Highlights?.Highlight2?.description2}</textarea> </div> </div> <!-- Third highlight --> <div class="border-t border-gray-200 pt-4"> <label class="block text-sm font-medium text-gray-700">Highlight 3</label> <div class="mt-2 space-y-2"> <input type="text" name="Highlights.Highlight3.Highlight3"${addAttribute(countryData.content?.Highlights?.Highlight3?.Highlight3 || templateContent.Home?.Highlights?.Highlight3?.Highlight3, "value")} placeholder="Title" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> <textarea name="Highlights.Highlight3.description3" placeholder="Description" rows="2" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.Highlights?.Highlight3?.description3 || templateContent.Home?.Highlights?.Highlight3?.description3}</textarea> </div> </div> </div> <!-- FAQ Content --> <div id="faqContent" class="hidden space-y-4"> <div> <label for="faqTitle" class="block text-sm font-medium text-gray-700">FAQ Title</label> <input type="text" id="faqTitle" name="FrequentlyAsk.Title"${addAttribute(countryData.content?.FrequentlyAsk?.Title || templateContent.Home?.FrequentlyAsk?.Title, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <div> <label for="faqDescription" class="block text-sm font-medium text-gray-700">FAQ Description</label> <input type="text" id="faqDescription" name="FrequentlyAsk.description1"${addAttribute(countryData.content?.FrequentlyAsk?.description1 || templateContent.Home?.FrequentlyAsk?.description1, "value")} class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> </div> <!-- First FAQ --> <div class="border-t border-gray-200 pt-4"> <label class="block text-sm font-medium text-gray-700">FAQ 1</label> <div class="mt-2 space-y-2"> <input type="text" name="FrequentlyAsk.Question1"${addAttribute(countryData.content?.FrequentlyAsk?.Question1 || templateContent.Home?.FrequentlyAsk?.Question1, "value")} placeholder="Question" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> <textarea name="FrequentlyAsk.Answer1" placeholder="Answer" rows="2" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.FrequentlyAsk?.Answer1 || templateContent.Home?.FrequentlyAsk?.Answer1}</textarea> </div> </div> <!-- Second FAQ --> <div class="border-t border-gray-200 pt-4"> <label class="block text-sm font-medium text-gray-700">FAQ 2</label> <div class="mt-2 space-y-2"> <input type="text" name="FrequentlyAsk.Question2"${addAttribute(countryData.content?.FrequentlyAsk?.Question2 || templateContent.Home?.FrequentlyAsk?.Question2, "value")} placeholder="Question" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> <textarea name="FrequentlyAsk.Answer2" placeholder="Answer" rows="2" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.FrequentlyAsk?.Answer2 || templateContent.Home?.FrequentlyAsk?.Answer2}</textarea> </div> </div> <!-- Third FAQ --> <div class="border-t border-gray-200 pt-4"> <label class="block text-sm font-medium text-gray-700">FAQ 3</label> <div class="mt-2 space-y-2"> <input type="text" name="FrequentlyAsk.Question3"${addAttribute(countryData.content?.FrequentlyAsk?.Question3 || templateContent.Home?.FrequentlyAsk?.Question3, "value")} placeholder="Question" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"> <textarea name="FrequentlyAsk.Answer3" placeholder="Answer" rows="2" class="block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">${countryData.content?.FrequentlyAsk?.Answer3 || templateContent.Home?.FrequentlyAsk?.Answer3}</textarea> </div> </div> </div> </div> </div> <button id="saveContentBtn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
Save All Content Changes
</button> <div id="contentFormMessage" class="mt-4 hidden"> <!-- Form messages will be displayed here --> </div> <div class="mt-8"> <h3 class="text-lg font-medium text-gray-900 mb-4">Preview Your Changes</h3> <a${addAttribute(`/${countryData.slug}`, "href")} target="_blank" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
Preview Site
</a> </div> </div> </div> </main> ` }), defineScriptVars({ countrySlug: slug }));
}, "C:/Users/Krishann/Desktop/RoboWebapp/international/src/pages/admin/edit-country/[slug].astro", void 0);

const $$file = "C:/Users/Krishann/Desktop/RoboWebapp/international/src/pages/admin/edit-country/[slug].astro";
const $$url = "/dubai/admin/edit-country/[slug]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$slug,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
