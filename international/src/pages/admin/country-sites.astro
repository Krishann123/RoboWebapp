---
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../lib/supabase-client";

// Fetch all country sites
const { data: countrySites, error } = await supabase
  .from("CountrySites")
  .select("*")
  .order("name");

// Fetch template data for the form
const { data: templates } = await supabase
  .from("Templates")
  .select("Name")
  .order("Name");

const templateNames = templates?.map(t => t.Name) || [];
---

<Layout title="Manage Country Sites">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-center">Manage Country Sites</h1>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Country Sites List -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Existing Country Sites</h2>
        
        {error && (
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            Error loading country sites: {error.message}
          </div>
        )}
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slug</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {countrySites?.map((site) => (
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{site.name}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{site.slug}</td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${site.active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {site.active ? 'Active' : 'Inactive'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex space-x-2">
                      <a href={`/admin/edit-country/${site.slug}`} class="text-indigo-600 hover:text-indigo-900">Edit</a>
                      <a href={`/${site.slug}`} target="_blank" class="text-blue-600 hover:text-blue-900">View</a>
                      <button class="text-red-600 hover:text-red-900 delete-site" data-id={site.id} data-name={site.name}>Delete</button>
                    </div>
                  </td>
                </tr>
              ))}
              
              {!countrySites || countrySites.length === 0 && (
                <tr>
                  <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500">No country sites found</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Create Country Site Form -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Create New Country Site</h2>
        
        <form id="createSiteForm" class="space-y-4">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">Country Name</label>
            <input type="text" id="name" name="name" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
          </div>
          
          <div>
            <label for="slug" class="block text-sm font-medium text-gray-700">Slug (URL Path)</label>
            <div class="mt-1 flex rounded-md shadow-sm">
              <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm">
                /
              </span>
              <input type="text" id="slug" name="slug" required class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="country-name" />
            </div>
            <p class="mt-1 text-sm text-gray-500">
              Only use lowercase letters, numbers, and hyphens. This will be the URL path.
            </p>
          </div>
          
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea id="description" name="description" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
          </div>
          
          <div>
            <label for="flagUrl" class="block text-sm font-medium text-gray-700">Flag URL</label>
            <input type="url" id="flagUrl" name="flagUrl" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="https://example.com/flag.png" />
          </div>
          
          <div>
            <label for="templateIndex" class="block text-sm font-medium text-gray-700">Template</label>
            <select id="templateIndex" name="templateIndex" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
              {templateNames.map((name, index) => (
                <option value={index}>{name}</option>
              ))}
            </select>
          </div>
          
          <div class="flex items-center">
            <input type="checkbox" id="active" name="active" checked class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
            <label for="active" class="ml-2 block text-sm text-gray-900">Active</label>
          </div>
          
          <div class="pt-4">
            <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Create Country Site
            </button>
          </div>
        </form>
        
        <div id="formMessage" class="mt-4 hidden">
          <!-- Form messages will be displayed here -->
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Form submission handler
  document.addEventListener('DOMContentLoaded', () => {
    const createForm = document.getElementById('createSiteForm');
    const formMessage = document.getElementById('formMessage');
    const deleteSiteButtons = document.querySelectorAll('.delete-site');
    
    // Auto-generate slug from name
    const nameInput = document.getElementById('name');
    const slugInput = document.getElementById('slug');
    
    if (nameInput && slugInput) {
      nameInput.addEventListener('input', () => {
        slugInput.value = nameInput.value
          .toLowerCase()
          .replace(/\s+/g, '-')
          .replace(/[^a-z0-9-]/g, '');
      });
    }
    
    // Form submission
    if (createForm) {
      createForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(createForm);
        const data = {
          name: formData.get('name'),
          slug: formData.get('slug'),
          description: formData.get('description'),
          flagUrl: formData.get('flagUrl'),
          active: formData.get('active') === 'on',
          templateIndex: parseInt(formData.get('templateIndex') || '0', 10)
        };
        
        try {
          formMessage.innerHTML = '<p class="text-gray-500">Creating country site...</p>';
          formMessage.classList.remove('hidden');
          
          const response = await fetch('/api/countries', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          });
          
          const result = await response.json();
          
          if (response.ok) {
            formMessage.innerHTML = `<p class="text-green-600">${result.message}</p>`;
            createForm.reset();
            
            // Reload the page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            formMessage.innerHTML = `<p class="text-red-600">Error: ${result.error}</p>`;
          }
        } catch (error) {
          formMessage.innerHTML = `<p class="text-red-600">Error: ${error.message}</p>`;
        }
      });
    }
    
    // Delete country site
    deleteSiteButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const id = button.getAttribute('data-id');
        const name = button.getAttribute('data-name');
        
        if (confirm(`Are you sure you want to delete ${name}? This action cannot be undone.`)) {
          try {
            const response = await fetch(`/api/countries?id=${id}`, {
              method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (response.ok) {
              alert(result.message);
              window.location.reload();
            } else {
              alert(`Error: ${result.error}`);
            }
          } catch (error) {
            alert(`Error: ${error.message}`);
          }
        }
      });
    });
  });
</script> 