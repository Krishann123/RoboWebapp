import Layout from "../layouts/Layout.astro";
import Jumbotron from "../components/Home/Jumbotron.astro";
import Join from "../components/Home/Joinrobo.astro";
import Package from "../components/Home/Package.astro";
import Robolution from "@/components/Home/Robolution.astro";
import Highlights from "@/components/Home/Highlights.astro";
import FrequentlyAsk from "@/components/Home/FrequentlyAsk.astro";
import Partners from "@/components/Home/Partners";
import NewsAndUpdate from "@/components/Home/NewsAndUpdate.astro";

export async function getStaticPaths() {
  try {
    // 1. Fetch the list of all country slugs from our backend API
    // This runs only at build time on the server.
    const apiBaseUrl = 'http://localhost:3000'; // The build runs locally before deploying
    const response = await fetch(`${apiBaseUrl}/api/templates`);
    if (!response.ok) {
      throw new Error(`Failed to fetch templates list: ${response.statusText}`);
    }
    const slugs = await response.json();
    console.log('[getStaticPaths] Fetched slugs:', slugs);

    // 2. For each slug, create a page and fetch its full data
    return await Promise.all(slugs.map(async (slug) => {
      const templateResponse = await fetch(`${apiBaseUrl}/api/template/${slug}`);
      if (!templateResponse.ok) {
        console.error(`Failed to fetch template for slug: ${slug}`);
        return { params: { slug }, props: { template: null } };
      }
      const template = await templateResponse.json();

      return {
        params: { slug: slug },
        props: { template },
      };
    }));
  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    // Return a default path to avoid a total build failure
    return [{ params: { slug: 'default' }, props: { template: null } }];
  }
}

const { template } = Astro.props;

// Handle the case where a specific template failed to fetch
if (!template) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found'
  });
}

const pageTitle = template.Navbar?.Content?.links[0]?.name || "Robolution";

<Layout title={pageTitle}>
    <Jumbotron 
        mainText={template.Home?.hero?.mainText}
        subText={template.Home?.hero?.subText}
        buttonText={template.Home?.hero?.buttonText}
        videoDirectory={template.Home?.hero?.videoDirectory}
    />
    <Robolution 
        roboIntro={template.Home?.Robolution?.title1?.intro1}
        roboSub={template.Home?.Robolution?.title1?.sub1}
        joinIntro={template.Home?.Robolution?.title2?.intro2}
        joinSub={template.Home?.Robolution?.title2?.sub2}
    />
    <Package tourGallery={template.Package?.TourGallery} />
    <Highlights 
        title={template.Highlights?.Title}
        items={template.Highlights?.items}
    />
    <Join />
    <NewsAndUpdate 
        countrySlug={Astro.params.slug}
        news={template.News?.[`latest-news`]} 
    />
    <FrequentlyAsk 
        title={template.FrequentlyAsk?.Title}
        description={template.FrequentlyAsk?.description1}
        items={template.FrequentlyAsk?.items}
    />
    <Partners partners={template.Home?.Partners?.src} />
</Layout> 