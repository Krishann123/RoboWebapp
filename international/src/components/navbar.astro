---
import { fetchPageContent } from "@/components/db";

const data = await fetchPageContent("Navbar");
const { links, button } = data.Content;
const { image, buttonText, buttonLink } = button;

// Get the base path from Astro's environment
const basePath = import.meta.env.BASE_URL || '/dubai';

// Check if user is logged in (by checking for robolution session cookie)
const { cookies } = Astro;
const isLoggedIn = cookies.has('robolution_session');

// Helper function to create internal links with the correct base path
function getPath(path) {
    // Don't add prefix to external links or paths to the main app
    if (path && (path.startsWith('http') || path.startsWith('//') || path === '/home')) {
        return path;
    }
    
    // For internal links, ensure they have the base path
    return basePath + (path.startsWith('/') ? path : `/${path}`);
}
---

<nav class="absolute w-full bg-[#2F1573]/30 backdrop-blur-md z-50">
    <div class="container mx-auto flex items-center justify-between py-3">
        <!-- Logo -->
        <div class="flex items-center">
            <!-- Logo Link - Now goes to Main Robolution Site -->
            <a href="/home" class="flex items-center md:gap-x-3 ml-5">
                <img src={image} alt="Logo" class="h-15 w-auto" />
            </a>
        </div>

        <!-- Navigation Links -->
        <div class="flex items-center gap-x-6">
            <ul class="hidden md:flex space-x-6 text-white font-medium">
                <!-- Home Link for International Webapp -->
                <li>
                    <a href={getPath('/home')} class="flex items-center text-yellow-300 hover:text-yellow-100 transition">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        <span>Back to Main website</span>
                    </a>
                </li>
                
                {
                    links.map(
                        (item: {
                            path: string | URL | null | undefined;
                            name: unknown;
                        }) => (
                            <li>
                                <a
                                    href={getPath(item.path)}
                                    class=" hover:text-[#C084FC] transition"
                                >
                                    {item.name}
                                </a>
                            </li>
                        )
                    )
                }

            </ul>

            <!-- CTA Button and Profile Button -->
            <div class="flex items-center gap-4 mr-5">
                <div class="flex sm:gap-4">
                    {isLoggedIn && (
                        <a
                            href="/profile"
                            class="bg-blue-500 text-white text-center text-xs lg:text-lg font-medium rounded-full px-4 py-2 hover:bg-blue-600 shadow-2xl transition mr-2"
                            id="profile-button"
                        >
                            Profile
                        </a>
                    )}
                    <a
                        href={getPath('/registration')}
                        class="bg-white text-blue-900 text-center text-xs lg:text-lg font-medium rounded-full px-4 py-2 hover:bg-indigo-400 hover:text-white shadow-2xl transition"
                    >
                        Register Now
                    </a>
                </div>
            </div>
            <!-- Hamburger Icon (shown on small screens) -->
            <button
                class="md:hidden mr-5 text-white hover:scale-120"
                id="menu-toggle"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="w-6 h-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
            </button>
        </div>

        <!-- Dropdown Menu (hidden by default, shown when menu is toggled) -->
        <div
            id="mobile-menu"
            class="fixed top-14 right-0 p-3 z-50 md:hidden hidden mt-5 text-center shadow-lg bg-[#2F1573]/60 backdrop-blur-md"
        >
            <ul class="space-y-2 text-white font-medium">
                <!-- Dynamic page links -->
                {
                    links.map((item) => (
                        <li>
                            <a
                                href={getPath(item.path)}
                                class="block hover:text-[#C084FC] hover:scale-120"
                            >
                                {item.name}
                            </a>
                        </li>
                    ))
                }

                <!-- Profile Link for Mobile (when logged in) -->
                {isLoggedIn && (
                    <li>
                        <a
                            href="/profile"
                            class="block text-blue-300 hover:text-blue-100 hover:scale-120 font-bold"
                        >
                            Profile
                        </a>
                    </li>
                )}
                <!-- Back to Main Site Link (Mobile) -->
                <li>
                    <a
                        href="/home"
                        class="block text-yellow-300 hover:text-yellow-100 hover:scale-120 font-bold"
                    >
                        ‚Üê Back to Main Site
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const menuToggle = document.getElementById("menu-toggle");
        const mobileMenu = document.getElementById("mobile-menu");

        if (menuToggle && mobileMenu) {
            menuToggle.addEventListener("click", () => {
                mobileMenu.classList.toggle("hidden");
                // Log the width of the mobile menu when toggled
                if (!mobileMenu.classList.contains("hidden")) {
                    console.log("Mobile menu width:", mobileMenu.offsetWidth + "px");
                }
            });

            // Optional: Hide menu when clicking outside
            document.addEventListener("click", (e) => {
                if (
                    !menuToggle.contains(e.target) &&
                    !mobileMenu.contains(e.target)
                ) {
                    mobileMenu.classList.add("hidden");
                }
            });
        }

        // Check if user is logged in by checking the cookie or localStorage
        async function checkLoginStatus() {
            // First check cookie
            const isLoggedInCookie = document.cookie.split(';').some(item => 
                item.trim().startsWith('robolution_session=')
            );
            
            // Also check localStorage which is used by the main app
            const isLoggedInLocalStorage = localStorage.getItem('isLoggedIn') === 'true';
            
            // Also check with our session-check API
            let isLoggedInAPI = false;
            try {
                const response = await fetch('/api/session-check?t=' + new Date().getTime(), {
                    credentials: 'include',
                    headers: { 'Cache-Control': 'no-cache' }
                });
                const data = await response.json();
                isLoggedInAPI = data.authenticated;
                console.log('Session check response:', data);
            } catch (error) {
                console.error('Error checking session:', error);
            }
            
            // Consider user logged in if any of these is true
            const isLoggedIn = isLoggedInCookie || isLoggedInLocalStorage || isLoggedInAPI;
            
            const profileButton = document.getElementById('profile-button');
            const mobileProfileLink = document.querySelector('a[href="/profile"]');
            
            if (isLoggedIn) {
                if (profileButton) profileButton.style.display = 'inline-block';
                if (mobileProfileLink) mobileProfileLink.style.display = 'block';
            } else {
                if (profileButton) profileButton.style.display = 'none';
                if (mobileProfileLink) mobileProfileLink.style.display = 'none';
            }
        }
        
        // Run on page load
        checkLoginStatus();
        
        // Also check every minute in case user logs in/out in another tab
        setInterval(checkLoginStatus, 60000);
    });
</script>
