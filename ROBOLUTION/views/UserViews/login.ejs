<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="shortcut icon" href="/images/ROBOLUTION_ICON.ico" type="image/x-icon">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f5ff;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        
        .login-container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 70, 0.1);
            padding: 30px;
            width: 100%;
            max-width: 400px;
            animation: fadeIn 0.5s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        h1 {
            text-align: center;
            color: #001f5c;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #001f5c;
        }
        
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccd7ea;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }
        
        .form-group input:focus {
            border-color: #003399;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 51, 153, 0.3);
        }
        
        .password-container {
            position: relative;
            display: flex;
            align-items: center;
        }

        .password-container input {
            padding-right: 40px; /* Make space for the icon */
        }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            user-select: none; /* Prevent text selection */
            /* Removed color and font-size, will be handled by SVG and img styling */
            width: 20px; /* Adjust size as needed */
            height: 20px; /* Adjust size as needed */
            display: flex; /* To center SVG if it has extra space */
            align-items: center;
            justify-content: center;
        }
        
        .toggle-password img {
            display: block;
            width: 100%;
            height: 100%;
        }
        
        .login-button {
            background-color: #003399;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 12px;
            width: 100%;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .login-button:hover {
            background-color: #00286b;
        }
        
        .register-link {
            text-align: center;
            margin-top: 20px;
        }
        
        .register-link a {
            color: #003399;
            text-decoration: none;
        }
        
        .register-link a:hover {
            text-decoration: underline;
        }
        
        .error-message {
            color: #d32f2f;
            text-align: center;
            margin-bottom: 15px;
            display: none;
        }
        
        .two-factor-container {
            margin-top: 15px;
            margin-bottom: 15px;
            display: none; /* Initially hidden */
        }
        
        .message-popup {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            display: none;
            z-index: 1000;
            animation: slideIn 0.5s ease-out;
        }

        .success {
            background-color: #28a745;
        }

        .error {
            background-color: #dc3545;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #003399;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* QR Code styling */
        .qr-code-container {
            margin-top: 15px;
            text-align: center;
            padding: 10px;
            border: 1px solid #ccd7ea;
            border-radius: 5px;
            background-color: #f9fbff;
        }
        
        .qr-code-container img {
            max-width: 200px;
            height: auto;
            margin: 10px auto;
            display: block;
        }
        
        .qr-code-instructions {
            font-size: 14px;
            color: #555;
            margin-bottom: 10px;
        }

        .options-container {
            text-align: right;
            margin-top: 10px;
        }
        
        .forgot-password-link {
            color: #003399;
            text-decoration: none;
            font-size: 14px;
            padding: 5px;
            display: inline-block;
            font-weight: bold;
        }

        .forgot-password-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="message-popup" id="messagePopup"></div>
    
    <div class="login-container">
        <h1>Login</h1>
        
        <div id="error-message" class="error-message"></div>
        
        <form id="loginForm">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required>
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <div class="password-container">
                    <input type="password" id="password" name="password" required>
                    <span class="toggle-password" id="togglePassword">
                        <img src="" alt="Toggle Password Visibility">
                    </span>
                </div>
            </div>
            
            <div id="twoFactorSection" class="form-group two-factor-container" style="display: none;">
                <label for="token">Two-Factor Code</label>
                <input type="text" id="token" name="token" placeholder="Enter 6-digit code from your authenticator app">
            </div>

            <div id="emailOtpSection" class="form-group two-factor-container" style="display: none;">
                <label for="emailOtp">Email Verification Code</label>
                <input type="text" id="emailOtp" name="emailOtp" placeholder="Enter 6-digit code from your email">
            </div>
            
            <!-- Hidden input for redirect URL -->
            <input type="hidden" id="redirect" name="redirect" value="">
            
            <button type="submit" class="login-button">
                <span>Login</span>
                <div class="loading-spinner" id="loadingSpinner"></div>
            </button>
            
            <div class="options-container">
                <a href="/password-reset" class="forgot-password-link">Forgot Password?</a>
            </div>
        </form>
        
        <div class="register-link">
            <a href="/signup">Don't have an account? Register here</a>
        </div>
    </div>
    
    <script>
        // Function to get URL parameters
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            var results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
        
        // Set redirect URL from query parameter if available
        document.addEventListener('DOMContentLoaded', function() {
            const redirectParam = getUrlParameter('redirect');
            if (redirectParam) {
                document.getElementById('redirect').value = redirectParam;
            }
            
            // Check for message parameter and display appropriate message
            const messageParam = getUrlParameter('message');
            if (messageParam === 'session_expired') {
                showMessage('Your session has expired. Please log in again.', 'error');
            }
        });
        
        function showMessage(message, type) {
            const popup = document.getElementById('messagePopup');
            popup.textContent = message;
            popup.className = `message-popup ${type}`;
            popup.style.display = 'block';
            
            setTimeout(() => {
                popup.style.display = 'none';
            }, 3000);
        }

        const loginForm = document.getElementById('loginForm');
        let isVerifyingEmailOtp = false;

        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const loadingSpinner = document.getElementById('loadingSpinner');
            loadingSpinner.style.display = 'inline-block';

            if (isVerifyingEmailOtp) {
                await handleEmailOtpVerification();
            } else {
                await handleLogin();
            }

            loadingSpinner.style.display = 'none';
        });

        async function handleLogin() {
            const formData = new FormData(loginForm);
            const data = {
                username: formData.get('username'),
                password: formData.get('password'),
                token: formData.get('token') || '',
                redirect: formData.get('redirect') || ''
            };

            try {
                const response = await fetch('/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include', // Ensure cookies are sent and received
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                console.log('Login response:', result);
                
                if (result.success) {
                    if (result.setLocalStorage) {
                        try {
                            // Set login status immediately
                            localStorage.setItem('isLoggedIn', 'true');
                            if (result.sessionID) {
                                localStorage.setItem('sessionID', result.sessionID);
                            }
                            console.log('localStorage isLoggedIn set to true, sessionID:', result.sessionID);
                            
                            // Log cookie configuration for debugging
                            if (result.cookieConfig) {
                                console.log('Cookie configuration:', result.cookieConfig);
                            }
                        } catch (e) { 
                            console.error('Could not save to localStorage:', e); 
                        }
                    }
                    showMessage('Login successful! Redirecting...', 'success');
                    
                    // Verify session was set before redirecting
                    fetch('/api/check-session', {
                        credentials: 'include',
                        headers: { 'Cache-Control': 'no-cache' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Session check after login:', data);
                        if (data.authenticated) {
                            // Session is confirmed, proceed with redirect
                            window.location.href = result.redirectUrl || '/';
                        } else {
                            // Session wasn't properly set - try once more with a longer delay
                            console.warn('Session not found on first check - retrying in 1 second...');
                            setTimeout(() => {
                                window.location.href = result.redirectUrl || '/';
                            }, 1000);
                        }
                    })
                    .catch(error => {
                        console.error('Error checking session:', error);
                        // Fallback to direct redirect if API call fails
                        setTimeout(() => {
                            window.location.href = result.redirectUrl || '/';
                        }, 1000);
                    });
                } else if (result.requireTwoFactor) {
                    if (result.needs2FASetup) {
                        showMessage('Redirecting to 2FA setup...', 'info');
                        window.location.href = `/2fa-confirmation?username=${encodeURIComponent(data.username)}&password=${encodeURIComponent(data.password)}`;
                    } else {
                        document.getElementById('twoFactorSection').style.display = 'block';
                        showMessage(result.message || 'Please enter your two-factor code', 'error');
                    }
                } else if (result.requireEmailOtp) {
                    // Switch form to email OTP verification mode
                    isVerifyingEmailOtp = true;
                    document.getElementById('password').parentElement.parentElement.style.display = 'none'; // Hide password
                    document.getElementById('twoFactorSection').style.display = 'none';
                    document.getElementById('emailOtpSection').style.display = 'block';
                    showMessage(result.message, 'success');
                } else {
                    showMessage(result.message || 'Login failed', 'error');
                }
            } catch (error) {
                console.error('Login error:', error);
                showMessage('An error occurred during login. Please try again.', 'error');
            }
        }

        async function handleEmailOtpVerification() {
            const formData = new FormData(loginForm);
            const data = {
                username: formData.get('username'),
                emailOtp: formData.get('emailOtp'),
                redirect: formData.get('redirect') || ''
            };

            try {
                const response = await fetch('/api/verify-email-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include', // Ensure cookies are sent and received
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    showMessage(result.message, 'success');
                     if (localStorage) { // Check for localStorage availability
                        try {
                            // Set login status immediately
                            localStorage.setItem('isLoggedIn', 'true');
                            if (result.sessionID) {
                                localStorage.setItem('sessionID', result.sessionID);
                            }
                            console.log('localStorage isLoggedIn set to true on OTP verify, sessionID:', result.sessionID);
                        } catch (e) { 
                            console.error('Could not save to localStorage:', e); 
                        }
                    }
                    // Add a small delay before redirecting
                    setTimeout(() => {
                        window.location.href = result.redirectUrl || '/';
                    }, 500);
                } else {
                    showMessage(result.message || 'Verification failed.', 'error');
                }
            } catch (error) {
                console.error('Email OTP verification error:', error);
                showMessage('An error occurred during verification. Please try again.', 'error');
            }
        }

        const passwordInput = document.getElementById('password');
        const togglePasswordButton = document.getElementById('togglePassword');
        const togglePasswordImage = togglePasswordButton.querySelector('img');

        // SVG icons as data URIs
        const eyeIconSVG = 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%23001f5c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>';
        const eyeSlashIconSVG = 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%23001f5c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>';

        if (togglePasswordButton && passwordInput && togglePasswordImage) {
            // Set initial icon
            togglePasswordImage.src = eyeIconSVG;

            togglePasswordButton.addEventListener('click', function() {
                // Toggle the type attribute
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                // Toggle the eye icon
                togglePasswordImage.src = type === 'password' ? eyeIconSVG : eyeSlashIconSVG;
            });
        }
    </script>
    
    <script>
        // Check if this page is being accessed via back button after logout
        window.addEventListener('pageshow', function(event) {
            // If the page is loaded from cache (back/forward navigation)
            if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
                // Clear any stale login state
                try {
                    localStorage.removeItem('isLoggedIn');
                    sessionStorage.clear();
                } catch (e) {
                    console.error('Could not clear storage:', e);
                }
                
                // Reset form
                document.getElementById('loginForm').reset();
                document.getElementById('twoFactorSection').style.display = 'none';
            }
        });
        
        // Also verify session state when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Quick check if we need to verify session (only if localStorage says we're logged in)
            if (localStorage.getItem('isLoggedIn') === 'true') {
                // Add a random parameter to avoid caching
                fetch('/api/check-session?t=' + new Date().getTime(), { 
                    credentials: 'include',
                    headers: { 'Cache-Control': 'no-cache' }
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Session check response:', data);
                    if (!data.authenticated) {
                        localStorage.removeItem('isLoggedIn');
                    }
                })
                .catch(error => {
                    console.error('Session check error:', error);
                });
            }
        });
    </script>
</body>
</html> 